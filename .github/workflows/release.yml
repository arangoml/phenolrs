name: Build Phenolrs Wheel

on:
  pull_request:
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"] # ["3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev
          pip install build maturin twine

      - name: Build the package
        run: python -m build

      - name: ls
        run: ls dist/*

      - name: Pip install from wheel
        run: pip install dist/*.whl

      - name: Publish to Test PyPi
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD_TEST }}
        run: twine upload --verbose --repository testpypi dist/*

      # - name: Publish to PyPi
      #   env:
      #     TWINE_USERNAME: __token__
      #     TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
      #   run: twine upload --repository pypi dist/*

  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ["3.10"] # ["3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: pip install build maturin twine

      - name: Build the package
        run: python -m build

      - name: ls
        run: ls dist/*

      - name: Pip install from wheel
        run: Get-ChildItem -Path dist -Filter *.whl | ForEach-Object { pip install $_.FullName }
        shell: powershell

      - name: Publish to Test PyPi
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD_TEST }}
        run: twine upload --verbose --repository testpypi dist/*

      # - name: Publish to PyPi
      #   env:
      #     TWINE_USERNAME: __token__
      #     TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
      #   run: twine upload --repository pypi dist/*

  build-macos:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, macos-13]
        python-version: ["3.10"] # ["3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          brew install openssl
          pip install build maturin twine

      - name: Build the package
        run: |
          if [[ "${{ matrix.os }}" == "macos-13" ]]; then
            CFLAGS="-arch x86_64" python -m build
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            CFLAGS="-arch arm64" python -m build
          fi

      - name: ls
        run: ls dist/*

      - name: Pip install from wheel
        run: pip install dist/*.whl

      - name: Publish to Test PyPi
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD_TEST }}
        run: twine upload --verbose --repository testpypi dist/*

      # - name: Publish to PyPi
      #   env:
      #     TWINE_USERNAME: __token__
      #     TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
      #   run: twine upload --repository pypi dist/*
